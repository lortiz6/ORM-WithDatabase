export { ApolloCache, Cache, InMemoryCache, MissingFieldError, defaultDataIdFromObject, makeVar } from "@apollo/client/cache";
export type { DataProxy, FieldFunctionOptions, FieldMergeFunction, FieldPolicy, FieldReadFunction, InMemoryCacheConfig, PossibleTypesMap, ReactiveVar, Transaction, TypePolicies, TypePolicy } from "@apollo/client/cache";
export * from "@apollo/client/cache/inmemory/types.js";
export type { FragmentMatcher, Resolver } from "@apollo/client/core/LocalState.js";
export { ObservableQuery } from "@apollo/client/core/ObservableQuery.js";
export type { FetchMoreOptions, UpdateQueryOptions } from "@apollo/client/core/ObservableQuery.js";
export { NetworkStatus, isNetworkRequestSettled } from "@apollo/client/core/networkStatus.js";
export * from "@apollo/client/core/types.js";
export type { ErrorPolicy, FetchMoreQueryOptions, FetchPolicy, MutationFetchPolicy, MutationOptions, QueryOptions, RefetchWritePolicy, SubscribeToMoreOptions, SubscriptionOptions, WatchQueryFetchPolicy, WatchQueryOptions } from "@apollo/client/core/watchQueryOptions.js";
export { ApolloError, isApolloError } from "@apollo/client/errors";
export * from "@apollo/client/link/core";
export * from "@apollo/client/link/http";
export { fromError, fromPromise, throwServerError, toPromise } from "@apollo/client/link/utils";
export type { ServerError } from "@apollo/client/link/utils";
export { DocumentTransform, Observable, isReference, makeReference } from "@apollo/client/utilities";
export type { DocumentTransformCacheKey, ObservableSubscription, Observer, Reference, StoreObject } from "@apollo/client/utilities";
export { disableExperimentalFragmentVariables, disableFragmentWarnings, enableExperimentalFragmentVariables, gql, resetCaches } from "graphql-tag";
export { ApolloClient, mergeOptions } from "./ApolloClient.js";
export type { ApolloClientOptions, DefaultOptions } from "./ApolloClient.js";
export { setVerbosity as setLogVerbosity };
import { setVerbosity } from "ts-invariant";
//# sourceMappingURL=index.d.ts.map